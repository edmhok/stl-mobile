export const __esModule: boolean;
export default TextField;
declare const TextField_base: any;
declare class TextField extends TextField_base {
    [x: string]: any;
    static getDerivedStateFromProps(_ref: any, state: any): {
        error: any;
        value: any;
    };
    constructor(props: any);
    onBlur(event: any): void;
    onFocus(event: any): void;
    onPress: () => void;
    onChange(event: any): void;
    onChangeText(text: any): void;
    onContentSizeChange(event: any): void;
    onFocusAnimationEnd(): void;
    inputRef: any;
    mounted: boolean;
    focused: boolean;
    state: {
        value: any;
        error: any;
        focusAnimation: _reactNative.Animated.Value;
        labelAnimation: _reactNative.Animated.Value;
        receivedFocus: boolean;
        height: number;
    };
    createGetter(name: any): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    startFocusAnimation(): void;
    startLabelAnimation(): void;
    setNativeProps(props: any): void;
    focusState(): 0 | 1 | -1;
    labelState(): 0 | 1;
    focus(): void;
    blur(): void;
    clear(): void;
    value(): string;
    setValue(value: any): void;
    isFocused(): any;
    isRestricted(): boolean;
    isErrored(): boolean;
    isDefaultVisible(): boolean;
    isPlaceholderVisible(): any;
    isLabelActive(): boolean;
    inputHeight(): any;
    inputContainerHeight(): any;
    inputProps(): {};
    inputStyle(): {
        fontSize: any;
        color: any;
        height: any;
    };
    renderLabel(props: any): any;
    renderLine(props: any): any;
    renderAccessory(prop: any): any;
    renderAffix(type: any): any;
    renderHelper(): any;
    renderInput(): any;
    render(): any;
}
import _reactNative = require("react-native");
