"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireWildcard(require("./styles"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Line extends _react.PureComponent {
  borderProps() {
    let {
      disabled,
      restricted,
      lineType,
      lineWidth,
      activeLineWidth,
      disabledLineWidth,
      baseColor,
      tintColor,
      errorColor,
      focusAnimation
    } = this.props;

    if (disabled) {
      return {
        borderColor: baseColor,
        borderWidth: disabledLineWidth
      };
    }

    if (restricted) {
      return {
        borderColor: errorColor,
        borderWidth: activeLineWidth
      };
    }

    return {
      borderColor: focusAnimation.interpolate({
        inputRange: [-1, 0, 1],
        outputRange: [errorColor, baseColor, tintColor]
      }),
      borderWidth: focusAnimation.interpolate({
        inputRange: [-1, 0, 1],
        outputRange: [activeLineWidth, lineWidth, activeLineWidth]
      }),
      borderStyle: lineType
    };
  }

  render() {
    let {
      lineType,
      labelWidth,
      labelAnimation,
      contentInset
    } = this.props;

    if (lineType === 'none') {
      return null;
    }

    let labelOffset = 2 * (contentInset.left - 2 * _styles.borderRadius);

    let lineOffset = _reactNative.Animated.add(labelWidth, labelOffset);

    let topLineContainerStyle = {
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }, {
        translateX: _reactNative.Animated.multiply(labelAnimation, lineOffset)
      }]
    };
    let leftContainerStyle = {
      width: contentInset.left - _styles.borderRadius
    };
    let rightContainerStyle = {
      width: contentInset.right - _styles.borderRadius
    };
    let topContainerStyle = {
      left: leftContainerStyle.width,
      right: rightContainerStyle.width
    };
    let lineStyle = this.borderProps();
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [_styles.default.topContainer, topContainerStyle],
      pointerEvents: "none"
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.topLineContainer, topLineContainerStyle]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.borderTop, lineStyle]
    }))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [_styles.default.rightContainer, rightContainerStyle],
      pointerEvents: "none"
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.borderRight, lineStyle]
    })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: _styles.default.bottomContainer,
      pointerEvents: "none"
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.borderBottom, lineStyle]
    })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [_styles.default.leftContainer, leftContainerStyle],
      pointerEvents: "none"
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.borderLeft, lineStyle]
    })));
  }

}

exports.default = Line;

_defineProperty(Line, "defaultProps", {
  lineType: 'solid',
  disabled: false,
  restricted: false
});

_defineProperty(Line, "propTypes", {
  lineType: _propTypes.default.oneOf(['solid', 'none']),
  disabled: _propTypes.default.bool,
  restricted: _propTypes.default.bool,
  tintColor: _propTypes.default.string,
  baseColor: _propTypes.default.string,
  errorColor: _propTypes.default.string,
  lineWidth: _propTypes.default.number,
  activeLineWidth: _propTypes.default.number,
  disabledLineWidth: _propTypes.default.number,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value),
  labelAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value),
  labelWidth: _propTypes.default.instanceOf(_reactNative.Animated.Value),
  contentInset: _propTypes.default.shape({
    left: _propTypes.default.number,
    right: _propTypes.default.number
  })
});
//# sourceMappingURL=index.js.map