"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireDefault(require("./styles"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const lineTypes = _propTypes.default.oneOf(['solid', 'dotted', 'dashed', 'none']);

class Line extends _react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      maxLineWidth: 1
    });
  }

  static getDerivedStateFromProps(props, state) {
    let {
      lineWidth,
      activeLineWidth,
      disabledLineWidth
    } = props;
    let maxLineWidth = Math.max(lineWidth, activeLineWidth, disabledLineWidth, 1);

    if (maxLineWidth !== state.maxLineWidth) {
      return {
        maxLineWidth
      };
    }

    return null;
  }

  borderProps() {
    let {
      disabled,
      restricted,
      lineWidth,
      activeLineWidth,
      disabledLineWidth,
      baseColor,
      tintColor,
      errorColor,
      focusAnimation
    } = this.props;

    if (disabled) {
      return {
        borderColor: baseColor,
        borderWidth: disabledLineWidth
      };
    }

    if (restricted) {
      return {
        borderColor: errorColor,
        borderWidth: activeLineWidth
      };
    }

    return {
      borderColor: focusAnimation.interpolate({
        inputRange: [-1, 0, 1],
        outputRange: [errorColor, baseColor, tintColor]
      }),
      borderWidth: focusAnimation.interpolate({
        inputRange: [-1, 0, 1],
        outputRange: [activeLineWidth, lineWidth, activeLineWidth]
      })
    };
  }

  render() {
    let {
      maxLineWidth
    } = this.state;
    let {
      disabled,
      lineType,
      disabledLineType
    } = this.props;
    let borderStyle = disabled ? disabledLineType : lineType;

    if (borderStyle === 'none') {
      return null;
    }

    let [top, right, left] = Array.from(new Array(3), () => -1.5 * maxLineWidth);
    let lineStyle = { ...this.borderProps(),
      borderStyle,
      top,
      right,
      left
    };
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: _styles.default.container,
      pointerEvents: "none"
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.line, lineStyle]
    }));
  }

}

exports.default = Line;

_defineProperty(Line, "defaultProps", {
  lineType: 'solid',
  disabledLineType: 'dotted',
  disabled: false,
  restricted: false
});

_defineProperty(Line, "propTypes", {
  lineType: lineTypes,
  disabledLineType: lineTypes,
  disabled: _propTypes.default.bool,
  restricted: _propTypes.default.bool,
  tintColor: _propTypes.default.string,
  baseColor: _propTypes.default.string,
  errorColor: _propTypes.default.string,
  lineWidth: _propTypes.default.number,
  activeLineWidth: _propTypes.default.number,
  disabledLineWidth: _propTypes.default.number,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value)
});
//# sourceMappingURL=index.js.map