"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _deprecatedReactNativePropTypes = require("deprecated-react-native-prop-types");

var _styles = _interopRequireDefault(require("./styles"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Label extends _react.PureComponent {
  render() {
    let {
      label,
      offset,
      disabled,
      restricted,
      fontSize,
      activeFontSize,
      contentInset,
      errorColor,
      baseColor,
      tintColor,
      style,
      focusAnimation,
      labelAnimation,
      ...props
    } = this.props;

    if (label == null) {
      return null;
    }

    let color = disabled ? baseColor : restricted ? errorColor : focusAnimation.interpolate({
      inputRange: [-1, 0, 1],
      outputRange: [errorColor, baseColor, tintColor]
    });
    let textStyle = {
      lineHeight: style && style.lineHeight || fontSize,
      fontSize,
      color
    };
    let {
      x0,
      y0,
      x1,
      y1
    } = offset;
    y0 += activeFontSize;
    y0 += contentInset.label;
    y0 += fontSize * 0.25;
    let containerStyle = {
      transform: [{
        scale: labelAnimation.interpolate({
          inputRange: [0, 1],
          outputRange: [1, activeFontSize / fontSize]
        })
      }, {
        translateY: labelAnimation.interpolate({
          inputRange: [0, 1],
          outputRange: [y0, y1]
        })
      }, {
        translateX: labelAnimation.interpolate({
          inputRange: [0, 1],
          outputRange: [x0, x1]
        })
      }]
    };
    return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.container, containerStyle]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.Text, _extends({
      style: [_styles.default.text, style, textStyle]
    }, props), label));
  }

}

exports.default = Label;

_defineProperty(Label, "defaultProps", {
  numberOfLines: 1,
  disabled: false,
  restricted: false
});

_defineProperty(Label, "propTypes", {
  numberOfLines: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  restricted: _propTypes.default.bool,
  fontSize: _propTypes.default.number.isRequired,
  activeFontSize: _propTypes.default.number.isRequired,
  baseColor: _propTypes.default.string.isRequired,
  tintColor: _propTypes.default.string.isRequired,
  errorColor: _propTypes.default.string.isRequired,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  labelAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  contentInset: _propTypes.default.shape({
    label: _propTypes.default.number
  }),
  offset: _propTypes.default.shape({
    x0: _propTypes.default.number,
    y0: _propTypes.default.number,
    x1: _propTypes.default.number,
    y1: _propTypes.default.number
  }),
  style: _deprecatedReactNativePropTypes.TextPropTypes.style,
  label: _propTypes.default.string
});
//# sourceMappingURL=index.js.map