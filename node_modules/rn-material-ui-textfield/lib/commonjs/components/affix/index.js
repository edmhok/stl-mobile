"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _deprecatedReactNativePropTypes = require("deprecated-react-native-prop-types");

var _styles = _interopRequireDefault(require("./styles"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Affix extends _react.PureComponent {
  render() {
    let {
      labelAnimation,
      style,
      children,
      type,
      fontSize,
      color
    } = this.props;
    let containerStyle = {
      height: fontSize * 1.5,
      opacity: labelAnimation
    };
    let textStyle = {
      includeFontPadding: false,
      textAlignVertical: 'top',
      fontSize,
      color
    };

    switch (type) {
      case 'prefix':
        containerStyle.paddingRight = 8;
        textStyle.textAlign = 'left';
        break;

      case 'suffix':
        containerStyle.paddingLeft = 8;
        textStyle.textAlign = 'right';
        break;
    }

    return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
      style: [_styles.default.container, containerStyle]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.Text, {
      style: [style, textStyle]
    }, children));
  }

}

exports.default = Affix;

_defineProperty(Affix, "defaultProps", {
  numberOfLines: 1
});

_defineProperty(Affix, "propTypes", {
  numberOfLines: _propTypes.default.number,
  style: _deprecatedReactNativePropTypes.TextPropTypes.style,
  color: _propTypes.default.string.isRequired,
  fontSize: _propTypes.default.number.isRequired,
  type: _propTypes.default.oneOf(['prefix', 'suffix']).isRequired,
  labelAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value).isRequired,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node])
});
//# sourceMappingURL=index.js.map