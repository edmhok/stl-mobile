"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _deprecatedReactNativePropTypes = require("deprecated-react-native-prop-types");

var _styles = _interopRequireDefault(require("./styles"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Helper extends _react.PureComponent {
  constructor(props) {
    super(props);
    let {
      error,
      focusAnimation
    } = this.props;
    let opacity = focusAnimation.interpolate({
      inputRange: [-1, -0.5, 0],
      outputRange: [1, 0, 1],
      extrapolate: 'clamp'
    });
    this.state = {
      errored: !!error,
      opacity
    };
  }

  componentDidMount() {
    let {
      focusAnimation
    } = this.props;
    this.listener = focusAnimation.addListener(this.onAnimation.bind(this));
  }

  componentWillUnmount() {
    let {
      focusAnimation
    } = this.props;
    focusAnimation.removeListener(this.listener);
  }

  onAnimation(_ref) {
    let {
      value
    } = _ref;

    if (this.animationValue > -0.5 && value <= -0.5) {
      this.setState({
        errored: true
      });
    }

    if (this.animationValue < -0.5 && value >= -0.5) {
      this.setState({
        errored: false
      });
    }

    this.animationValue = value;
  }

  render() {
    let {
      errored,
      opacity
    } = this.state;
    let {
      style,
      title,
      error,
      disabled,
      baseColor,
      errorColor
    } = this.props;
    let text = errored ? error : title;

    if (text == null) {
      return null;
    }

    let textStyle = {
      opacity,
      color: !disabled && errored ? errorColor : baseColor
    };
    return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.Text, {
      style: [_styles.default.text, style, textStyle]
    }, text);
  }

}

exports.default = Helper;

_defineProperty(Helper, "propTypes", {
  title: _propTypes.default.string,
  error: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  style: _deprecatedReactNativePropTypes.TextPropTypes.style,
  baseColor: _propTypes.default.string,
  errorColor: _propTypes.default.string,
  focusAnimation: _propTypes.default.instanceOf(_reactNative.Animated.Value)
});
//# sourceMappingURL=index.js.map